/*#######################################################
 *
 *   Maintained 2017-2025 by Gregor Santner <gsantner AT mailbox DOT org>
 *
 *   License of this file: Apache 2.0
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
#########################################################*/
apply plugin: 'com.android.application'
if (enable_plugin_kotlin) {
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: 'kotlin-kapt'
}

rootProject.ext.version_minSdk = 18

// https://github.com/vsch/flexmark-java/releases
ext.version_library_flexmark = "0.42.14"

android {
    buildToolsVersion rootProject.ext.version_buildTools
    compileSdkVersion rootProject.ext.version_compileSdk

    defaultConfig {
        resValue "string", "manifest_package_id", "net.gsantner.markor"
        applicationId "net.gsantner.markor"
        versionName "2.15.1"
        versionCode 160

        multiDexEnabled true
        minSdkVersion rootProject.ext.version_minSdk
        targetSdkVersion rootProject.ext.version_compileSdk
        buildConfigField "boolean", "IS_TEST_BUILD", "false"
        buildConfigField "boolean", "IS_GPLAY_BUILD", "false"
        buildConfigField "String[]", "DETECTED_ANDROID_LOCALES", "${findUsedAndroidLocales()}"
        buildConfigField "String", "BUILD_DATE", "\"${getBuildDate()}\""
        buildConfigField "String", "GITHASH", "\"${getGitHash}\""
        buildConfigField "String", "GITMSG", "\"${getGitLastCommitMessage}\""
        setProperty("archivesBaseName", applicationId + "-v" + versionCode + "-" + versionName)
    }

    // Keep existing flavors AND add your three side-by-side forks
    flavorDimensions "default"
    productFlavors {
        flavorAtest {
            applicationId "net.gsantner.markor_test"
            versionCode = Integer.parseInt(new Date().format('yyMMdd'))
            versionName = defaultConfig.versionName + "-" + new Date().format('HHmm')
            buildConfigField "boolean", "IS_TEST_BUILD", "true"
        }
        flavorDefault {
        }
        flavorGplay {
            buildConfigField "boolean", "IS_GPLAY_BUILD", "true"
        }

        // ========= Your additional forks (unique applicationId + label) =========
        notes {
            applicationId "io.embanaphe.notes"
            versionNameSuffix "-notes"
            resValue "string", "app_name", "Markor Notes"
        }
        mental {
            applicationId "io.embanaphe.mental"
            versionNameSuffix "-mental"
            resValue "string", "app_name", "Markor Mental"
        }
        journal {
            applicationId "io.embanaphe.journal"
            versionNameSuffix "-journal"
            resValue "string", "app_name", "Markor Journal"
        }
        tabletop {
            applicationId "io.embanaphe.tabletop"
            versionNameSuffix "-tabletop"
            resValue "string", "app_name", "Markor Tabletop"
        }
        dev {
            applicationId "io.embanaphe.dev"
            versionNameSuffix "-dev"
            resValue "string", "app_name", "Markor Dev"
        }
        health {
            applicationId "io.embanaphe.health"
            versionNameSuffix "-health"
            resValue "string", "app_name", "Markor Health"
        }
        wiki {
            applicationId "io.embanaphe.wiki"
            versionNameSuffix "-wiki"
            resValue "string", "app_name", "Markor Wiki"
        }
        social {
            applicationId "io.embanaphe.social"
            versionNameSuffix "-social"
            resValue "string", "app_name", "Markor Social"
        }
        reference {
            applicationId "io.embanaphe.reference"
            versionNameSuffix "-reference"
            resValue "string", "app_name", "Markor Reference"
        }
        learn {
            applicationId "io.embanaphe.learn"
            versionNameSuffix "-learn"
            resValue "string", "app_name", "Markor Learn"
        }
        todo {
            applicationId "io.embanaphe.todo"
            versionNameSuffix "-todo"
            resValue "string", "app_name", "Markor To-Do"
        }
        scratch {
            applicationId "io.embanaphe.scratch"
            versionNameSuffix "-scratch"
            resValue "string", "app_name", "Markor Scratch"
        }
        // =======================================================================
    }

    sourceSets {
        main { assets.srcDirs = ['src/main/assets'] }
        if (enable_plugin_kotlin) {
            main.java.srcDirs += 'src/main/kotlin'
        }
        main.java.srcDirs += 'thirdparty/java'
        main.res.srcDirs += 'thirdparty/res'
        main.assets.srcDirs += 'thirdparty/assets'
    }

    // ===== Signing for release (reads secrets/env vars at build time) =====
    signingConfigs {
        release {
            // CI (GitHub Actions) should set ANDROID_KEYSTORE_PATH via $GITHUB_ENV
            def ksPath = System.getenv("ANDROID_KEYSTORE_PATH") ?: ""
            if (ksPath) {
                storeFile file(ksPath)
                storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
                keyAlias System.getenv("ANDROID_KEY_ALIAS")
                keyPassword System.getenv("ANDROID_KEY_ALIAS_PASSWORD")
                // You created the key via OpenSSL (PKCS#12)
                storeType "PKCS12"   // <-- if you switch to a .jks later, remove this line
            }
        }
    }

    buildTypes {
        release {
            // Keep upstream release settings; add signing
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        // debug buildType remains default/unsigned (no changes needed)
    }

    packagingOptions {
        resources {
            excludes += ['META-INF/LICENSE-LGPL-2.1.txt', 'META-INF/LICENSE-LGPL-3.txt', 'META-INF/LICENSE-W3C-TEST']
        }
    }

    compileOptions {
        encoding = 'UTF-8'
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    namespace 'net.gsantner.markor'
    lint {
        abortOnError false
        disable 'MissingTranslation', 'InvalidPackage', 'ObsoleteLintCustomCheck', 'DefaultLocale', 'UnusedAttribute', 'VectorRaster', 'InflateParams', 'IconLocation', 'UnusedResources', 'TypographyEllipsis'
    }
}

dependencies {
    // Testing
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.assertj:assertj-core:3.13.1'

    // Android standard libs
    implementation "androidx.multidex:multidex:2.0.1"
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.preference:preference:1.2.0'
    implementation 'androidx.legacy:legacy-preference-v14:1.0.0'
    implementation 'androidx.browser:browser:1.4.0'

    // Markdown convertor (Flexmark)
    implementation "com.vladsch.flexmark:flexmark:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-util:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-emoji:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-tasklist:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-superscript:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-autolink:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-toc:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-tables:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-jekyll-front-matter:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-jekyll-tag:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-anchorlink:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-yaml-front-matter:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-footnotes:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-gitlab:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-typographic:${version_library_flexmark}"
    implementation "com.vladsch.flexmark:flexmark-ext-admonition:${version_library_flexmark}"

    // csv support
    // https://opencsv.sourceforge.net/licenses.html License: Apache2
    // opencsv 3.10 was the last java-6 version
    // opencsv 5.7.1' for java-8 may have dependencies that are not backward compatibility with android-4.1
    //noinspection GradleDependency
    implementation('com.opencsv:opencsv:3.10') {
        // do not get transitive 'commons-beanutils:commons-beanutils as the opencsv bean <-> csv feature is not used
        exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }

    // UI libs
    implementation 'com.github.Pixplicity:gene-rate:v1.1.8'
    implementation 'com.github.AppIntro:AppIntro:6.2.0'
    implementation 'com.github.mertakdut:EpubParser:1.0.95'
    implementation 'com.github.martin-stone:hsv-alpha-color-picker-android:3.1.0'

    // Tool libraries
    //noinspection AnnotationProcessorOnCompilePath
    implementation 'commons-io:commons-io:2.7'
    if (enable_plugin_kotlin) {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${version_plugin_kotlin}"
    }

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10.1'

    // Processors
    def anpros = []
    for (anpro in anpros) {
        if (enable_plugin_kotlin) {
            kapt anpro
        } else {
            annotationProcessor anpro
        }
    }
}
